<%- layout('layouts/boilerplate') -%>

  <div id="map" class="mb-5" style="width: 100%; height: 300px;"></div>
  <div class="d-flex justify-content-between align-items-center mb-3">
    <h1>All Campgrounds</h1>
    <input type="text" id="search" class="form-control w-50" placeholder="Search campgrounds..." />
    <a href="/campgrounds/new" class="btn btn-success">Create New Campground</a>
  </div>
  <% for(let campground of campgrounds) { %>
    <div class="card mb-3">
      <div class="row">
        <div class="col-md-4">
          <% if (campground.images.length===0) { %>
            <img style="max-height: 250px;" class="img-fluid"
              src="https://res.cloudinary.com/dupwmux7x/image/upload/v1759647982/No-Image-Placeholder.svg_wgr6fr.png" />
            <% } else {%>
              <img class="img-fluid" src="<%= campground.images[0].url %>" />
              <% } %>
        </div>
        <div class="col-md-8">
          <div class="card-body">
            <h5 class="card-title">
              <%= campground.title %>
            </h5>
            <p class="card-text">
              <%= campground.description %>
            </p>
            <p class="card-text">
              <small class="text-muted">
                <%= campground.location %>
              </small>
            </p>
            <a href="/campgrounds/<%= campground._id %>" class="btn btn-primary">View Campground</a>
          </div>
        </div>
      </div>
    </div>
    <% } %>








      <div id="campgrounds-data" data-campgrounds='<%- JSON.stringify(campgrounds) %>'></div>

      <script>
        const campgrounds = { features: JSON.parse(document.getElementById('campgrounds-data').dataset.campgrounds) };

        mapboxgl.accessToken = '<%-process.env.MAPBOX_TOKEN%>';
        const map = new mapboxgl.Map({
          container: 'map',
          // Choose from Mapbox's core styles, or make your own style with Mapbox Studio
          style: 'mapbox://styles/mapbox/standard',
          config: {
            basemap: {
              theme: 'monochrome',
              lightPreset: 'night'
            }
          },
          center: [-103.5917, 40.6699],
          zoom: 3
        });
        map.addControl(new mapboxgl.NavigationControl());
        map.on('load', () => {
          // Add a new source from our GeoJSON data and
          // set the 'cluster' option to true. GL-JS will
          // add the point_count property to your source data.
          map.addSource('campgrounds', {
            type: 'geojson',
            generateId: true,

            data: campgrounds,
            cluster: true,
            clusterMaxZoom: 14, // Max zoom to cluster points on
            clusterRadius: 50 // Radius of each cluster when clustering points (defaults to 50)
          });

          map.addLayer({
            id: 'clusters',
            type: 'circle',
            source: 'campgrounds',
            filter: ['has', 'point_count'],
            paint: {
              // Use step expressions (https://docs.mapbox.com/style-spec/reference/expressions/#step)
              // with three steps to implement three types of circles:
              //   * Blue, 20px circles when point count is less than 100
              //   * Yellow, 30px circles when point count is between 100 and 750
              //   * Pink, 40px circles when point count is greater than or equal to 750
              'circle-color': [
                'step',
                ['get', 'point_count'],
                '#51bbd6',
                100,
                '#f1f075',
                750,
                '#f28cb1'
              ],
              'circle-radius': [
                'step',
                ['get', 'point_count'],
                20,
                100,
                30,
                750,
                40
              ],
              'circle-emissive-strength': 1
            }
          });

          map.addLayer({
            id: 'cluster-count',
            type: 'symbol',
            source: 'campgrounds',
            filter: ['has', 'point_count'],
            layout: {
              'text-field': ['get', 'point_count_abbreviated'],
              'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],
              'text-size': 12
            }
          });

          map.addLayer({
            id: 'unclustered-point',
            type: 'circle',
            source: 'campgrounds',
            filter: ['!', ['has', 'point_count']],
            paint: {
              'circle-color': '#11b4da',
              'circle-radius': 4,
              'circle-stroke-width': 1,
              'circle-stroke-color': '#fff',
              'circle-emissive-strength': 1
            }
          });

          // inspect a cluster on click
          map.addInteraction('click-clusters', {
            type: 'click',
            target: { layerId: 'clusters' },
            handler: (e) => {
              const features = map.queryRenderedFeatures(e.point, {
                layers: ['clusters']
              });
              const clusterId = features[0].properties.cluster_id;
              map.getSource('campgrounds').getClusterExpansionZoom(
                clusterId,
                (err, zoom) => {
                  if (err) return;

                  map.easeTo({
                    center: features[0].geometry.coordinates,
                    zoom: zoom
                  });
                }
              );
            }
          });

          // When a click event occurs on a feature in
          // the unclustered-point layer, open a popup at
          // the location of the feature, with
          // description HTML from its properties.
          map.addInteraction('click-unclustered-point', {
            type: 'click',
            target: { layerId: 'unclustered-point' },
            handler: (e) => {
              const coordinates = e.feature.geometry.coordinates.slice();

              new mapboxgl.Popup()
                .setLngLat(coordinates)
                .setHTML(
                  `${e.feature.properties.popUpMarkup}`
                )
                .addTo(map);
            }
          });

          // Change the cursor to a pointer when the mouse is over a cluster of POIs.
          map.addInteraction('clusters-mouseenter', {
            type: 'mouseenter',
            target: { layerId: 'clusters' },
            handler: () => {
              map.getCanvas().style.cursor = 'pointer';
            }
          });

          // Change the cursor back to a pointer when it stops hovering over a cluster of POIs.
          map.addInteraction('clusters-mouseleave', {
            type: 'mouseleave',
            target: { layerId: 'clusters' },
            handler: () => {
              map.getCanvas().style.cursor = '';
            }
          });

          // Change the cursor to a pointer when the mouse is over an individual POI.
          map.addInteraction('unclustered-mouseenter', {
            type: 'mouseenter',
            target: { layerId: 'unclustered-point' },
            handler: () => {
              map.getCanvas().style.cursor = 'pointer';
            }
          });

          // Change the cursor back to a pointer when it stops hovering over an individual POI.
          map.addInteraction('unclustered-mouseleave', {
            type: 'mouseleave',
            target: { layerId: 'unclustered-point' },
            handler: () => {
              map.getCanvas().style.cursor = '';
            }
          });
        });
      </script>